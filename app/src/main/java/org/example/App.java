/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

/*
import java.lang.classfile.*;
import java.lang.constant.ClassDesc;
import java.lang.constant.ConstantDescs;
import java.lang.constant.MethodTypeDesc;
import java.net.URLClassLoader;
*/
import java.lang.reflect.*;
import javassist.*;

public class App {
    public String getGreeting() throws Exception {
        ClassPool pool = ClassPool.getDefault();
        CtClass ctHello = pool.makeClass("org.example.Hello");
        ctHello.setSuperclass(pool.get("java.lang.Object"));

        CtMethod.make("public String speak() { return \"Hello, world\"; }", ctHello);

        Class<?> clHello = pool.toClass(ctHello);

        Object helloObj = clHello.getConstructor().newInstance();
        Method rspeak = clHello.getDeclaredMethod("speak");
        return (String)rspeak.invoke(helloObj);

        // Create a class and call it
        /*
        var CD_Hello = ClassDesc.of("org.example.HelloWorld");
        var CD_String = ClassDesc.of("java.lang.String");
        var CD_System = ClassDesc.of("java.lang.System");
        var CD_PrintStream = ClassDesc.of("java.io.PrintStream");
        var MTD_void_void = MethodTypeDesc.of(ConstantDescs.CD_void, ConstantDescs.CD_void);
        var MTD_void_String = MethodTypeDesc.of(ConstantDescs.CD_void, CD_String);
        byte[] bytes = ClassFile.of().build(CD_Hello,
            clb -> clb.withFlags(ClassFile.ACC_PUBLIC)
                    .withMethod(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void,
                                ClassFile.ACC_PUBLIC,
                                mb -> mb.withCode(
                                        cob -> cob.aload(0)
                                                    .invokespecial(ConstantDescs.CD_Object,
                                                                ConstantDescs.INIT_NAME, ConstantDescs.MTD_void)
                                                    .return_()))
                    .withMethod("main", MTD_void_void, ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC,
                                mb -> mb.withCode(
                                        cob -> cob.getstatic(CD_System, "out", CD_PrintStream)
                                                    .ldc("Hello World")
                                                    .invokevirtual(CD_PrintStream, "println", MTD_void_String)
                                                    .return_())));
        */
    }

    public static void main(String[] args) throws Exception{
        System.out.println(new App().getGreeting());
    }
}
